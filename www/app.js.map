{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import \"./binding\";\nimport \"./styles.css\";\n\nexport async function openConnection(ephemeralKey: string) {\n  // Create a peer connection\n  const pc = new RTCPeerConnection();\n\n  // Set up to play remote audio from the model\n  const audioEl = document.createElement(\"audio\");\n  audioEl.autoplay = true;\n\n  pc.ontrack = (e) => (audioEl.srcObject = e.streams[0]);\n\n  // Add local audio track for microphone input in the browser\n  const ms = await navigator.mediaDevices.getUserMedia({\n    audio: true,\n  });\n  const micTrack = ms.getTracks()[0];\n  pc.addTrack(micTrack);\n\n  // Set up data channel for sending and receiving events\n  const dc = pc.createDataChannel(\"oai-events\");\n\n  // Event listeners for data channel\n  const eventListeners = new Map();\n\n  dc.addEventListener(\"message\", (e) => {\n    // Notify all registered event listeners\n    const data = e.data;\n    console.log(\"Received event:\", data);\n\n    // Dispatch event to all registered handlers\n    eventListeners.forEach((callback) => {\n      callback(data);\n    });\n  });\n\n  // Start the session using the Session Description Protocol (SDP)\n  const offer = await pc.createOffer();\n  await pc.setLocalDescription(offer);\n\n  const baseUrl = \"https://api.openai.com/v1/realtime\";\n  const model = \"gpt-4o-realtime-preview-2025-06-03\";\n  const sdpResponse = await fetch(`${baseUrl}?model=${model}`, {\n    method: \"POST\",\n    body: offer.sdp,\n    headers: {\n      Authorization: `Bearer ${ephemeralKey}`,\n      \"Content-Type\": \"application/sdp\",\n    },\n  });\n\n  const answer: RTCSessionDescriptionInit = {\n    type: \"answer\",\n    sdp: await sdpResponse.text(),\n  };\n  await pc.setRemoteDescription(answer);\n\n  // Create the connection object\n  const connection = {\n    // Cleanup method to terminate the connection\n    close: () => {\n      console.log(\"Closing WebRTC connection\");\n      // Clean up tracks\n      if (micTrack) {\n        micTrack.stop();\n      }\n      // Close data channel\n      if (dc) {\n        dc.close();\n      }\n      // Close peer connection\n      if (pc) {\n        pc.close();\n      }\n    },\n    // Audio element controls\n    setVolume: (volume: number) => {\n      audioEl.volume = Math.max(0, Math.min(1, volume));\n    },\n    muteAudio: () => {\n      audioEl.muted = true;\n    },\n    unmuteAudio: () => {\n      audioEl.muted = false;\n    },\n\n    // Microphone controls\n    muteMic: () => {\n      micTrack.enabled = false;\n    },\n    unmuteMic: () => {\n      micTrack.enabled = true;\n    },\n\n    // Data channel methods\n    sendMessage: (event: any) => {\n      console.log(\"Sending event:\", event);\n      dc.send(JSON.stringify(event));\n    },\n    sendMessages: (events: any[]) => {\n      for (const event of events) {\n        console.log(\"Sending event:\", event);\n        dc.send(JSON.stringify(event));\n      }\n    },\n    addEventListener: (id: string, callback: (data: any) => void) => {\n      eventListeners.set(id, callback);\n    },\n    removeEventListener: (id: string) => {\n      eventListeners.delete(id);\n    },\n\n    // Expose elements for advanced use cases\n    getAudioElement: () => audioEl,\n    getPeerConnection: () => pc,\n    getDataChannel: () => dc,\n    getMicrophoneTrack: () => micTrack,\n  };\n\n  return connection;\n}\n\n// Custom Shiny output binding for real-time display\nvar realtimeBinding = new Shiny.OutputBinding();\n\n$.extend(realtimeBinding, {\n  find: function (scope) {\n    return $(scope).find(\".shinyrealtime\");\n  },\n\n  renderValue: function (el, data) {\n    const id = this.getId(el);\n\n    // Store connection in element data for cleanup\n    let connectionPromise = openConnection(data).then((connection) => {\n      $(document).on(\"shiny:disconnected\", function () {\n        console.log(\"Shiny disconnected, cleaning up any WebRTC connections\");\n        connection.close();\n      });\n\n      $(el).data(\"rtConnection\", connection);\n\n      // Set up Shiny-specific event handling\n      connection.addEventListener(\"shiny\", (data) => {\n        Shiny.setInputValue(id + \"_event\", data, { priority: \"event\" });\n      });\n\n      // Set up message handler for sending events from Shiny\n      Shiny.addCustomMessageHandler(\"realtime_send\", (events) => {\n        connection.sendMessages(events);\n      });\n\n      return connection;\n    });\n  },\n\n  // Clean up connection when element is removed/updated\n  unsubscribe: function (el) {\n    const connection = $(el).data(\"rtConnection\");\n    if (connection && typeof connection.close === \"function\") {\n      console.log(\"Closing WebRTC connection due to element unsubscribe\");\n      connection.close();\n    }\n  },\n});\n\n// Register the binding\nShiny.outputBindings.register(realtimeBinding, \"realtime-output\");\n"],
  "mappings": "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",
  "names": ["data"]
}
